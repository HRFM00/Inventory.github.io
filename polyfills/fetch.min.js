/*! Minimal fetch polyfill using XHR (ES5) */
(function(self){
  if (self.fetch) return;
  function Headers(h){ this.map={}; if (h){ for (var k in h){ if (h.hasOwnProperty(k)) this.map[k.toLowerCase()] = String(h[k]); } } }
  Headers.prototype.get = function(k){ return this.map[k.toLowerCase()] || null; };
  Headers.prototype.set = function(k,v){ this.map[k.toLowerCase()] = String(v); };
  function Body(){ }
  Body.prototype.text = function(){ var self=this; return Promise.resolve(self._body || ''); };
  Body.prototype.json = function(){ return this.text().then(function(t){ return JSON.parse(t || 'null'); }); };
  function Response(body, opts){ opts=opts||{}; this.status=opts.status||200; this.statusText=opts.statusText||''; this.headers=opts.headers||new Headers(); this.ok=this.status>=200&&this.status<300; this._body=body; }
  function Request(input, opts){ opts=opts||{}; this.url=String(input); this.method=(opts.method||'GET').toUpperCase(); this.headers=new Headers(opts.headers||{}); this.body=opts.body||null; this.credentials=opts.credentials||'same-origin'; }
  self.fetch = function(input, opts){ return new Promise(function(resolve, reject){ var req = new Request(input, opts||{}); var xhr = new XMLHttpRequest(); xhr.open(req.method, req.url, true);
      for (var k in req.headers.map){ if (req.headers.map.hasOwnProperty(k)) xhr.setRequestHeader(k, req.headers.map[k]); }
      xhr.onreadystatechange = function(){ if (xhr.readyState === 4){ var headers = new Headers(); var raw = xhr.getAllResponseHeaders() || ''; var arr = raw.trim().split(/\r?\n/); for (var i=0;i<arr.length;i++){ var line = arr[i]; var idx=line.indexOf(':'); if (idx>0){ headers.set(line.substr(0,idx).trim(), line.substr(idx+1).trim()); } }
          resolve(new Response(xhr.responseText, { status: xhr.status, statusText: xhr.statusText, headers: headers })); } };
      xhr.onerror = function(){ reject(new TypeError('Network request failed')); };
      if (req.body) xhr.send(req.body); else xhr.send(); }); };
  self.Headers = Headers; self.Request = Request; self.Response = Response;
})(this);


