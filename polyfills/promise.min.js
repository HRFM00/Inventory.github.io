/*! Minimal Promise polyfill (copied) */
(function(global){
  if (global.Promise) return;
  function isFunc(f){ return typeof f === 'function'; }
  function asap(fn){ setTimeout(fn,0); }
  function Handler(onFulfilled,onRejected,next){ this.onFulfilled=onFulfilled; this.onRejected=onRejected; this.next=next; }
  function resolvePromise(promise, x){
    if (promise === x) return reject(promise, new TypeError('self'));
    if (x && (typeof x === 'object' || isFunc(x))){
      var then; var called = false;
      try { then = x.then; } catch (e){ return reject(promise, e); }
      if (isFunc(then)){
        try {
          then.call(x, function(y){ if (called) return; called = true; resolvePromise(promise, y); }, function(r){ if (called) return; called = true; reject(promise, r); });
        } catch (e){ if (!called) reject(promise, e); }
        return;
      }
    }
    fulfill(promise, x);
  }
  function fulfill(promise, value){ if (promise._state !== 0) return; promise._state = 1; promise._value = value; finale(promise); }
  function reject(promise, reason){ if (promise._state !== 0) return; promise._state = 2; promise._value = reason; finale(promise); }
  function finale(p){ if (p._handlers.length === 0) return; asap(function(){
    for (var i=0;i<p._handlers.length;i++) handle(p, p._handlers[i]); p._handlers = []; }); }
  function handle(p, h){ if (p._state === 0){ p._handlers.push(h); return; }
    asap(function(){ var cb = p._state === 1 ? h.onFulfilled : h.onRejected; if (!isFunc(cb)){ (p._state===1? fulfill : reject)(h.next, p._value); return; }
      try { var ret = cb(p._value); resolvePromise(h.next, ret); } catch (e){ reject(h.next, e); } }); }
  function Promise(fn){ if (!(this instanceof Promise)) throw new TypeError('Promise'); if (!isFunc(fn)) throw new TypeError('fn'); this._state=0; this._value=void 0; this._handlers=[]; var self=this; try{ fn(function(v){ resolvePromise(self, v); }, function(r){ reject(self, r); }); }catch(e){ reject(self, e); } }
  Promise.prototype.then = function(onF, onR){ var next = new Promise(function(){}); handle(this, new Handler(onF, onR, next)); return next; };
  Promise.prototype.catch = function(onR){ return this.then(null, onR); };
  Promise.resolve = function(v){ return new Promise(function(res){ res(v); }); };
  Promise.reject = function(r){ return new Promise(function(_,rej){ rej(r); }); };
  Promise.all = function(arr){ return new Promise(function(res,rej){ if (!arr || !arr.length) return res([]); var out=[], left=arr.length; for (var i=0;i<arr.length;i++) (function(i){ Promise.resolve(arr[i]).then(function(v){ out[i]=v; if(--left===0) res(out); }, rej); })(i); }); };
  Promise.race = function(arr){ return new Promise(function(res,rej){ for (var i=0;i<arr.length;i++) Promise.resolve(arr[i]).then(res, rej); }); };
  global.Promise = Promise;
})(this);


